/*
 *
 * {{properCase name }}
 *
 */

import React from 'react';
import PropTypes from 'prop-types';
import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';
{{#if wantMessages}}
import { FormattedMessage } from 'react-intl';
{{/if}}
{{#if wantActionsAndReducer}}
import { createStructuredSelector } from 'reselect';
import makeSelect{{properCase name}} from './selectors';
{{/if}}
import * as actions from './actions';
{{#if wantMessages}}
import messages from './messages';
{{/if}}
{{#if wantHeaders}}
import { {{ properCase name }}Helmet } from './helmet';
{{/if}}

/* eslint-disable react/prefer-stateless-function */
export class {{ properCase name }} extends React.{{{ component }}} {
  static propTypes = {
  };

  render() {
    return (
      <div>
      {{#if wantHeaders}}
      <{{ properCase name }}Helmet />
      {{/if}}
      {{#if wantMessages}}
        <FormattedMessage {...messages.header} />
      {{/if}}
      </div>
    );
  }
}

{{#if wantActionsAndReducer}}
const mapStateToProps = createStructuredSelector({
  {{camelCase name}}: makeSelect{{properCase name}}(),
});
{{/if}}

const mapDispatchToProps = dispatch =>
  bindActionCreators(
    {
      ...actions,
    },
    dispatch,
  );

{{#if wantActionsAndReducer}}
export default connect(mapStateToProps, mapDispatchToProps)({{ properCase name }});
{{else}}
export default connect(null, mapDispatchToProps)({{ properCase name }});
{{/if}}
